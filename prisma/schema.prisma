generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    expires      DateTime

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    attachments    Attachment[]
    availabilities Availability[]
    subscriptions  Subscription[]

    ownEvents     Event[]                @relation("ownedEvents")
    invitedEvents InvitedUsersOnEvents[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()

    @@map("users")
}

model InvitedUsersOnEvents {
    userId  String
    user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    eventId String
    event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

    @@id([userId, eventId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationTokens")
}

model Availability {
    id        String           @id @default(cuid())
    available AvailabilityType
    comment   String?
    date      DateTime         @db.Date()
    fromTime  DateTime?
    untilTime DateTime?
    owner     User             @relation(fields: [ownerId], references: [id])
    ownerId   String
    event     Event            @relation(fields: [eventId], references: [id], onDelete: Cascade)
    eventId   String
    reactions Reaction[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()

    @@map("availabilities")
}

enum AvailabilityType {
    GOOD
    MAYBE
    NOT_GOOD
}

model Reaction {
    id             String       @id @default(cuid())
    ownerId        String
    ownerName      String
    emoji          String
    shortcodes     String
    availabilityId String
    availability   Availability @relation(fields: [availabilityId], references: [id], onDelete: Cascade)

    @@unique([ownerId, shortcodes, availabilityId])
    @@map("reactions")
}

model Event {
    id             String                 @id @default(cuid())
    name           String
    slug           String                 @unique()
    description    String?
    public         Boolean                @default(false)
    published      Boolean                @default(false)
    wholeDay       Boolean                @default(false)
    fromDate       DateTime
    untilDate      DateTime
    owner          User                   @relation(name: "ownedEvents", fields: [ownerId], references: [id])
    ownerId        String
    availabilities Availability[]
    invitedUsers   InvitedUsersOnEvents[]
    tags           String[]
    coverImage     Attachment?            @relation(fields: [coverImageId], references: [id])
    coverImageId   String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()

    @@map("events")
}

model Attachment {
    id      String  @id @default(cuid())
    type    String
    name    String
    url     String
    owner   User    @relation(fields: [ownerId], references: [id])
    ownerId String
    events  Event[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()

    @@map("attachments")
}

model Subscription {
    id       String @id @default(cuid())
    owner    User   @relation(fields: [ownerId], references: [id])
    ownerId  String
    endpoint String
    sub      Json

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()

    @@unique([ownerId, endpoint])
    @@map("subscriptions")
}

// type SubObj {
//     endpoint       String
//     expirationTime DateTime? @db.Date
//     keys           SubKeys
// }

// type SubKeys {
//     p256dh String
//     auth   String
// }
