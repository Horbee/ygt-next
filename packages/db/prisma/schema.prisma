generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  v  Int    @default(0) @map("__v") @ignore

  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  userId            String  @db.ObjectId
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  v  Int    @default(0) @map("__v") @ignore

  sessionToken String   @unique
  expires      DateTime
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  v  Int    @default(0) @map("__v") @ignore

  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  attachments     Attachment[]
  availabilities  Availability[]
  ownEvents       Event[]        @relation("ownedEvents")
  invitedEventIds String[]       @db.ObjectId
  invitedEvents   Event[]        @relation(name: "invitedEvents", fields: [invitedEventIds], references: [id])
  subscriptions   Subscription[]

  createdAt DateTime @default(now()) @db.Date
  updatedAt DateTime @updatedAt() @db.Date

  @@map("users")
}

model VerificationToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationTokens")
}

model Availability {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  v  Int    @default(0) @map("__v") @ignore

  available AvailabilityType
  comment   String?
  date      DateTime         @db.Date
  fromTime  DateTime?        @db.Date
  untilTime DateTime?        @db.Date
  owner     User             @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId   String           @map("owner") @db.ObjectId
  event     Event            @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId   String           @map("event") @db.ObjectId
  reactions Reaction[]

  createdAt DateTime @default(now()) @db.Date
  updatedAt DateTime @updatedAt() @db.Date

  @@unique([ownerId, id])
  @@map("availabilities")
}

enum AvailabilityType {
  GOOD
  MAYBE
  NOT_GOOD
}

type Reaction {
  ownerId    String @db.ObjectId
  ownerName  String
  emoji      String
  shortcodes String
}

model Event {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  v  Int    @default(0) @map("__v") @ignore

  name           String
  slug           String         @unique()
  description    String?
  public         Boolean        @default(false)
  published      Boolean        @default(false)
  wholeDay       Boolean        @default(false)
  fromDate       DateTime       @db.Date
  untilDate      DateTime       @db.Date
  owner          User           @relation(name: "ownedEvents", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId        String         @map("owner") @db.ObjectId
  availabilities Availability[]
  invitedUserIds String[]       @db.ObjectId
  invitedUsers   User[]         @relation(name: "invitedEvents", fields: [invitedUserIds], references: [id])
  tags           String[]
  coverImage     Attachment?    @relation(fields: [coverImageId], references: [id], onDelete: SetNull)
  coverImageId   String?        @map("attachment") @db.ObjectId

  createdAt DateTime @default(now()) @db.Date
  updatedAt DateTime @updatedAt() @db.Date

  @@map("events")
}

model Attachment {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  v  Int    @default(0) @map("__v") @ignore

  type     String
  name     String
  url      String
  publicId String @unique
  owner    User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId  String @map("owner") @db.ObjectId

  createdAt DateTime @default(now()) @db.Date
  updatedAt DateTime @updatedAt() @db.Date
  events    Event[]

  @@unique([id, ownerId])
  @@map("attachments")
}

model Subscription {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  v  Int    @default(0) @map("__v") @ignore

  owner    User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId  String @map("owner") @db.ObjectId
  endpoint String
  sub      SubObj

  createdAt DateTime @default(now()) @db.Date
  updatedAt DateTime @updatedAt() @db.Date

  @@unique([ownerId, endpoint])
  @@map("subscriptions")
}

type SubObj {
  endpoint       String
  expirationTime DateTime? @db.Date
  keys           SubKeys
}

type SubKeys {
  p256dh String
  auth   String
}
